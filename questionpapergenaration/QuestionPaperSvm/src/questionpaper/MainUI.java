/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package questionpaper;

import java.awt.BorderLayout;
import java.io.File;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Iterator;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jfree.ui.RefineryUtilities;

import org.jfree.chart.*;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.data.category.*;
import org.jfree.chart.plot.*;
import org.jfree.chart.renderer.category.BarRenderer;

import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.JTableHeader;

import java.net.*;
import java.util.StringTokenizer;

/**
 *
 * @author HP
 */
public class MainUI extends javax.swing.JFrame {
    ArrayList<String> at1 = new ArrayList<String>();
    ArrayList<String> at2 = new ArrayList<String>();
    String att1 = new String();
    String att2 = new String();
    String EOL = "\r\n";
    
    ArrayList<String> semDict1 = new ArrayList<String>();
    ArrayList<String> semDict2 = new ArrayList<String>();  
    
    ArrayList<String> keyWordsInQNormal = new ArrayList<String>();
    
    ArrayList<String> keys = new ArrayList<String>();
    ArrayList<Integer> nonMachineIndexes = new ArrayList<Integer>();
    ArrayList<String> generatedKeysFA = new ArrayList<String>();    
    ArrayList<String> allNonMLQuestions = new ArrayList<String>();
    
    ArrayList<Integer> allMLIndexes = new ArrayList<Integer>();
    ArrayList<String> allMLQuestions = new ArrayList<String>();
    
    ArrayList<String> allPreQuesionsPreWords = new ArrayList<String>();
    ArrayList<String> specificPreWords = new ArrayList<String>();
    
    int questionPaperSize = 0;
    
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lq = new javax.swing.JButton();
        lsmd1 = new javax.swing.JButton();
        fa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lq.setText("LOAD QUESTIONS & PATTERNS");
        lq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lqActionPerformed(evt);
            }
        });

        lsmd1.setText("FIRST APPROACH WITH ML");
        lsmd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lsmd1ActionPerformed(evt);
            }
        });

        fa.setText("FIRST APPROACH WITHOUT ML");
        fa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fa, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lq, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lsmd1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(274, 274, 274))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(lq)
                .addGap(70, 70, 70)
                .addComponent(fa)
                .addGap(84, 84, 84)
                .addComponent(lsmd1)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lqActionPerformed
       try{
        FileInputStream file  = new FileInputStream("OS_facts.xlsx");
        XSSFWorkbook workbook = new XSSFWorkbook(file);
        XSSFSheet sheet = workbook.getSheetAt(0);  
        Iterator<Row> rowIterator = sheet.iterator();
          while (rowIterator.hasNext()) {                          
                Row row = rowIterator.next();                
                Iterator<Cell> cellIterator = row.cellIterator();
                Cell cell = cellIterator.next();
                while (cellIterator.hasNext()) 
                {
                at1.add(row.getCell(0).toString());
                at2.add(row.getCell(1).toString());

                break;
                }

                }
                 file.close();
       JOptionPane.showMessageDialog(null, "QUESTIONS SUCCESSFULLY LOADED TO MEMORY!!");
            
       //pattern loading code starts..
       keyWordsInQNormal.clear();
       FileInputStream fis = new FileInputStream("keywordsnormalNonML.txt");
       byte bb[] = new byte[fis.available()];
       fis.read(bb);
       fis.close();
       String wholeKeysString = new String(bb);
       wholeKeysString = wholeKeysString.trim();
       StringTokenizer st = new StringTokenizer(wholeKeysString,EOL);
       while(st.hasMoreTokens()){
           keyWordsInQNormal.add(st.nextToken());
       }
       JOptionPane.showMessageDialog(null, "KEY WORDS IN QUESTIONS LOADED INDIVIDUALLY!!");
       //pattern loading code ends...
       String ssize = JOptionPane.showInputDialog(null,"enter question paper size");
       questionPaperSize = Integer.parseInt(ssize);
       
       }catch(Exception e){
           System.out.println(e);
       }
    }//GEN-LAST:event_lqActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
       try{
      
       lq.setEnabled(true);
      
       }catch(Exception e){
           System.out.println(e);
       }
    }//GEN-LAST:event_formComponentShown

    private void lsmd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lsmd1ActionPerformed
       try{
           
           System.out.println("------------------------------------");
           System.out.println();
           System.out.println();System.out.println();System.out.println();
           
            Socket socket=new Socket("127.0.0.1",8888);
            DataInputStream inStream=new DataInputStream(socket.getInputStream());
            DataOutputStream outStream=new DataOutputStream(socket.getOutputStream());
            outStream.writeUTF("");
            outStream.flush();
            String serverMessage=inStream.readUTF();
            //System.out.println(serverMessage);
            outStream.close();
            outStream.close();
            socket.close();
            semDict1.clear();
            StringTokenizer st = new StringTokenizer(serverMessage," ");
            while(st.hasMoreTokens()){
                semDict1.add(st.nextToken());
            }
            //System.out.println(generatedKeysFA);            
            allMLIndexes.clear();
            allMLQuestions.clear();            
            for(int i=0;i<generatedKeysFA.size();i++){
                String key = generatedKeysFA.get(i);
                GetMaxLengthIndex gmli = new GetMaxLengthIndex();
                int index = gmli.getMaxIndexForKey(key);
                allMLIndexes.add(index);
            }  
            //System.out.println(allMLIndexes);
            String allQuestionsInSecondForNotepad = "";  
            for(int i=0;i<allMLIndexes.size();i++){
                int index = allMLIndexes.get(i);
                allMLQuestions.add(at1.get(index));
               // System.out.println(at1.get(index));
                allQuestionsInSecondForNotepad += at1.get(index) + EOL;
            }
            
            for(int i=0;i<allMLQuestions.size();i++){
                System.out.println(allMLQuestions.get(i));
            }
            
            allQuestionsInSecondForNotepad = allQuestionsInSecondForNotepad.trim();
            FileOutputStream fos = new FileOutputStream("second.txt");        
            fos.write(allQuestionsInSecondForNotepad.getBytes());
            fos.close();

            Runtime r = Runtime.getRuntime();
           // r.exec("notepad second.txt");
            JFrame frame = new JFrame();
        Vector<Vector> rowData = new Vector<Vector>();
        rowData.clear();
        rowData.clear();
        Vector<String> row = null;

        Vector<String> columnNames = new Vector<String>();
        columnNames.clear();
        columnNames.addElement("NUMBER");
        columnNames.addElement("QUESTION");
        
        for(int i=0;i<allMLQuestions.size();i++){
            row = new Vector<String>();
            row.add((i+1)+"");            
            row.add(allMLQuestions.get(i));
            rowData.add(row);
        }
       
                //frame.setVisible(true);
               // frame.setResizable(true);
                
            int genSize = allMLQuestions.size();
            float accuracy = (float)genSize/questionPaperSize;
            float accToDisplay = accuracy * 100;
           /* final Barchart demo = new Barchart("Accuracy for machine learning first approach..!",accToDisplay);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);
                */
           
           // exacat question framing 
           allPreQuesionsPreWords.clear();
           FileInputStream fisFFF = new FileInputStream("question_pre_words.txt");
           byte bbFFF[] = new byte[fisFFF.available()];
           fisFFF.read(bbFFF);
           fisFFF.close();
           
           String strFFF = new String(bbFFF);
           strFFF = strFFF.trim();
           
           StringTokenizer stFFF = new StringTokenizer(strFFF,EOL);
           while(stFFF.hasMoreTokens()){
              allPreQuesionsPreWords.add(stFFF.nextToken()); 
           }
           
           System.out.println("----------------------------------------------------------");
           //System.out.println(allPreQuesionsPreWords);
           //System.out.println(allPreQuesionsPreWords.size());
           specificPreWords.clear();
           for(int i=0;i<allMLIndexes.size();i++){
             int index = allMLIndexes.get(i);
            // System.out.println(index);
            specificPreWords.add(allPreQuesionsPreWords.get(index)); 
           }
           
           //System.out.println(specificPreWords);
           
           System.out.println("********************************************************");
           ArrayList<String> allRelWords = new ArrayList<String>();
           allRelWords.clear();
           
           ArrayList<String> allRelPostMLwords = new ArrayList<String>();
           allRelPostMLwords.clear();
           
           ArrayList<String> AllFinalQuestions = new ArrayList<String>();
           AllFinalQuestions.clear();
           
           FileInputStream fisML = new FileInputStream("keywordsnormalML.txt");
           byte bbML[] = new byte[fisML.available()];
           fisML.read(bbML);
           fisML.close();
           String strML = new String(bbML);
           strML = strML.trim();
           StringTokenizer stML = new StringTokenizer(strML,EOL);
           while(stML.hasMoreTokens()){
               allRelWords.add(stML.nextToken());
           }
           
           for(int i=0;i<allMLIndexes.size();i++){
               int index = allMLIndexes.get(i);
               allRelPostMLwords.add(allRelWords.get(index));
           }
           
           //System.out.println();
          //System.out.println(allRelPostMLwords);
           //System.out.println(specificPreWords);
           
           
         for(int i=0;i<specificPreWords.size();i++){
             String word = specificPreWords.get(i);
             if(word.contains(" ")){
             String preWord = word.substring(0,word.lastIndexOf(" "));
            Shuffler sf = new Shuffler();
             String tt = allRelPostMLwords.get(i);
             String toAdd = sf.getSuffledWord(tt);
            
             //String toFrame = preWord+" "+allRelPostMLwords.get(i)+"?"+EOL;
             String toFrame = preWord+" "+toAdd+"?"+EOL;             
             AllFinalQuestions.add(toFrame); 
             }
             else{
                 Shuffler sf = new Shuffler();
                String tt = allRelPostMLwords.get(i);
             String toAdd = sf.getSuffledWord(tt);
            
             //String toFrame = preWord+" "+allRelPostMLwords.get(i)+"?"+EOL;
             String toFrame = word+" "+toAdd+"?"+EOL;      
                  AllFinalQuestions.add(toFrame); 
             }
         }
        
         for(int i=0;i<AllFinalQuestions.size();i++){
         System.out.println(AllFinalQuestions.get(i));
         }
       }catch(Exception e){
           JOptionPane.showMessageDialog(null,"START THE FIRST SERVER AND TRY AGAIN...!");
           System.out.println(e);
       }
    }//GEN-LAST:event_lsmd1ActionPerformed

    private void faActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faActionPerformed
        try{        
        keys.clear();
        FileInputStream fis = new FileInputStream("keypattern.txt");
        byte bb[] = new byte[fis.available()];
        fis.read(bb);
        fis.close();
        
        String allKeys = new String(bb);
        allKeys = allKeys.trim();
        
        StringTokenizer st = new StringTokenizer(allKeys,EOL);
        while(st.hasMoreTokens()){
          keys.add(st.nextToken());  
        }
        
        nonMachineIndexes.clear();
        Random random = new Random();
        while (nonMachineIndexes.size() < questionPaperSize) {
            nonMachineIndexes.add(random.nextInt(at1.size()-1) + 1);
        }
        //System.out.println(nonMachineIndexes);
        generatedKeysFA.clear();
        
        for(int i=0;i<nonMachineIndexes.size();i++){
            int index = nonMachineIndexes.get(i);
            generatedKeysFA.add(keys.get(index));
        }
        //System.out.println(generatedKeysFA);
        
        FirstApproachKeys fak = new FirstApproachKeys(generatedKeysFA);
        fak.setVisible(true);
        
        ArrayList<Integer> finalQuestionsIndexesNonML = new ArrayList<Integer>();
        finalQuestionsIndexesNonML.clear();
        for(int i=0;i<generatedKeysFA.size();i++){
            String key = generatedKeysFA.get(i);
            ArrayList<Integer> tmpIndexs = new ArrayList<Integer>();
            for(int j=0;j<keyWordsInQNormal.size();j++){
                
                String word = keyWordsInQNormal.get(j);
                if(word.contains(key)){
                    System.out.println(word);
                    System.out.println(key);
                    System.out.println(j);
                    tmpIndexs.add(j);
                }
            
            }
           if(tmpIndexs.size()>0){
            finalQuestionsIndexesNonML.add(tmpIndexs.get(0));
            tmpIndexs.clear();
            }
        }
        
        System.out.println(finalQuestionsIndexesNonML);            
        allNonMLQuestions.clear();
        
        for(int i=0;i<finalQuestionsIndexesNonML.size();i++){
            int index = finalQuestionsIndexesNonML.get(i);            
             allNonMLQuestions.add(at1.get(index));
        }
        JFrame frame = new JFrame();
        Vector<Vector> rowData = new Vector<Vector>();
        rowData.clear();
        rowData.clear();
        Vector<String> row = null;

        Vector<String> columnNames = new Vector<String>();
        columnNames.clear();
        columnNames.addElement("NUMBER");
        columnNames.addElement("QUESTION");
        
        
        String allQuestionsInFirstForNotepad = "";
        for(int i=0;i<allNonMLQuestions.size();i++){
            row = new Vector<String>();
            row.add((i+1)+"");            
            row.add(allNonMLQuestions.get(i));
            System.out.println(allNonMLQuestions.get(i));
            allQuestionsInFirstForNotepad += allNonMLQuestions.get(i) + EOL;
            rowData.add(row);
        }
        
        allQuestionsInFirstForNotepad = allQuestionsInFirstForNotepad.trim();
        FileOutputStream fos = new FileOutputStream("first.txt");        
        fos.write(allQuestionsInFirstForNotepad.getBytes());
        fos.close();
        
        Runtime r = Runtime.getRuntime();
       // r.exec("notepad first.txt");
        
        
                
            int genSize = allNonMLQuestions.size();
            float accuracy = (float)genSize/questionPaperSize;
            float accToDisplay = accuracy * 100;
            /*
            final Barchart demo = new Barchart("Accuracy for non machine learning first approach..!",accToDisplay);
            demo.pack();
            RefineryUtilities.centerFrameOnScreen(demo);
            demo.setVisible(true);
              */  
                
                
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_faActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fa;
    private javax.swing.JButton lq;
    private javax.swing.JButton lsmd1;
    // End of variables declaration//GEN-END:variables
}
